module UART_RX( rx_done_tick, rx_dout, rx, s_tick, clk, reset);

/*******************************/
// declaration
parameter Dbits = 8;
parameter SB_tick = 16;
input clk, reset;
input rx, s_tick;
output reg rx_done_tick;
output [Dbits-1:0] rx_dout;

/******************************/
// FSM parameter 
localparam IDLE = 0, START = 1, DATA = 2, STOP = 3;
reg [1:0] state, state_NEXT;
reg [3:0] s_reg, s_next;    //keep track of the baud rate tick (16 total)
reg[$clog2(Dbits-1):0] n_reg, n_next;   //keep track of the number of data bits received
reg [Dbits-1:0] b_reg, b_next;   //shift the received data bits

/******************************/
// state register
always@(posedge clk , negedge reset)
    begin
        if(~reset) begin
         state <= IDLE;
         s_reg <= 0;
         n_reg <= 0;
         b_reg <= 0;
        end
    else begin
        state <= state_NEXT;
        s_reg <= s_next;
        n_reg <= n_next;
        b_reg <= b_next;
    end
 end

 /******************************/
 // next state logic
 always@(*) begin
    state_NEXT <= state;
    s_reg <= s_next;
    n_reg <= n_next;
    b_reg <= b_next;
    rx_done_tick <= 1'b0;
    case(state)
        IDLE:begin
            if(~rx) begin
                s_next <= 0;
                state_NEXT <= START;
            end
        end
        START: begin
            if(s_tick) 
                if(s_reg == 7) begin
                    s_next <= 0;
                    n_next <= 0;
                    state_NEXT <= DATA;
                end
                else
                    s_next <= s_reg +1;
            
        end
        DATA:begin
            if(s_tick)
            if(s_reg == 15) begin
                s_next <= 0;
                b_next <= {rx,b_reg[Dbits-1:1]}; //shift right
            if(n_reg == (Dbits-1))
            state_NEXT <= STOP;
            else
             n_next <= n_reg+1;
            end
        end
        STOP:begin
            if(s_tick)
            if(s_reg == (SB_tick-1)) begin
                rx_done_tick <= 1;
                state_NEXT <= IDLE;
            end
            else
                s_next <= s_reg +1;
        end
    endcase
end
endmodule
